{"version":3,"sources":["Video.tsx","core/ffmpeg.ts","Render.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Video","src","Grid","item","xs","Box","display","justifyContent","fluid","width","height","position","memo","window","FFmpeg","createFFmpeg","fetchFile","ffmpeg","initFFMPEG","writeLogFn","a","console","log","logger","corePath","error","load","mergeVideo","srcVideo","srcAudio","Error","FS","run","useStyles","makeStyles","renderBox","maxHeight","overflowY","borderBottom","color","listStyleType","Render","triggerChangeVideo","classes","useState","trueLog","setTrueLogs","setLog","message","moment","format","type","useEffect","handleRenderBtn","catch","err","videoData","m","className","map","i","Button","onClick","App","state","args","videoOutput","srcBlob","URL","createObjectURL","Blob","buffer","setState","Container","container","justify","Typography","align","variant","this","startIcon","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.936ca6c6.chunk.js","sourcesContent":["import React, {memo} from 'react';\r\nimport './video-react.css';\r\n\r\nimport { Player, BigPlayButton } from 'video-react';\r\n\r\nimport { Grid, Box } from '@material-ui/core';\r\n\r\ninterface IProps {\r\n    src: String;\r\n}\r\n\r\n\r\nconst Video = ({ src }: IProps) => {\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box display=\"flex\" justifyContent=\"center\">\r\n                <div>\r\n                    <Player fluid={false} width={400} height={300} src={src}>\r\n                        <BigPlayButton position='center' />\r\n                    </Player>\r\n                </div>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default memo(Video);\r\n","const { createFFmpeg, fetchFile } = (window as any).FFmpeg;\r\nlet ffmpeg: any = null;\r\n\r\nexport interface ILogMessage {\r\n    type: string;\r\n    message: string;\r\n}\r\n\r\nexport const initFFMPEG = async (\r\n    writeLogFn: (message: ILogMessage) => void\r\n): Promise<boolean> => {\r\n    console.log('Load mpeg....');\r\n    ffmpeg = createFFmpeg({\r\n        logger: writeLogFn,\r\n        corePath: '/vendor/ffmpeg-core.js',\r\n    });\r\n    console.error('Ready mpeg....');\r\n    await ffmpeg.load();\r\n    console.error('Success Load mpeg');\r\n    return true;\r\n};\r\n\r\nexport const setLog = (fn: any) => {\r\n    ffmpeg.setLogger((message: any) => {\r\n        console.log('loggerrrrrrrrrrrrrrrrr');\r\n        fn(message);\r\n    });\r\n}\r\n\r\nexport const mergeVideo = async (\r\n    srcVideo: string,\r\n    srcAudio: string\r\n): Promise<Uint8Array> => {\r\n    if (ffmpeg === null) throw new Error('FFMPEG not load!');\r\n    console.log('Start Write file');\r\n    ffmpeg.FS('writeFile', 'videoSrc', await fetchFile(srcVideo));\r\n    ffmpeg.FS('writeFile', 'audioSrc', await fetchFile(srcAudio));\r\n    console.log('End write file');\r\n    await ffmpeg.run(\r\n        '-i',\r\n        'videoSrc',\r\n        '-i',\r\n        'audioSrc',\r\n        '-map',\r\n        '0',\r\n        '-map',\r\n        '1:a',\r\n        '-c:v',\r\n        'copy',\r\n        'output.mp4'\r\n    );\r\n\r\n    return ffmpeg.FS('readFile', 'output.mp4');\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport './App.css';\r\n\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Grid, Box, Button } from '@material-ui/core';\r\n\r\nimport { initFFMPEG, mergeVideo, ILogMessage, setLog } from './core/ffmpeg';\r\nimport { LocalGroceryStoreTwoTone } from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    srcVideo?: string;\r\n    srcAudio?: string;\r\n    triggerChangeVideo: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    renderBox: {\r\n        maxHeight: 250,\r\n        overflowY: 'auto',\r\n        borderBottom: '1px solid #f44336',\r\n        '& ul': {\r\n            color: '#949494',\r\n            listStyleType: 'none',\r\n        },\r\n    },\r\n});\r\n\r\nexport default function Render({\r\n    srcVideo,\r\n    srcAudio,\r\n    triggerChangeVideo,\r\n}: IProps) {\r\n    const classes = useStyles();\r\n    const [trueLog, setTrueLogs] = useState<Array<string>>([]);\r\n    const [log, setLog] = useState<string>('');\r\n\r\n    const writeLogFn = (message: ILogMessage) => {\r\n        setLog(\r\n            `- [${moment().format('LTS')}] ${message.type}: ${message.message}`\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTrueLogs([log, ...trueLog]);\r\n    }, [log]);\r\n\r\n    const handleRenderBtn = async () => {\r\n        writeLogFn({\r\n            type: 'INFO',\r\n            message: 'Loading ffmpeg...',\r\n        });\r\n\r\n        // Init  MPEG\r\n        const loaded = await initFFMPEG(writeLogFn).catch((err) => {\r\n            return null;\r\n        });\r\n        if (loaded !== true) {\r\n            writeLogFn({\r\n                type: 'ERROR',\r\n                message: 'Cannot load ffmpeg',\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Start convert video\r\n        const videoData = await mergeVideo(\r\n            'https://video.fsin8-2.fna.fbcdn.net/v/t76.34397-2/10000000_432608211393644_6257794261104987602_n.mp4?_nc_cat=106&ccb=1-3&_nc_sid=5aebc0&efg=eyJ2ZW5jb2RlX3RhZyI6ImRhc2hfdjRfcGFzc3Rocm91Z2hfZnJhZ18yX3ZpZGVvIiwicG9saWN5SWQiOjYxNDd9&_nc_ohc=L5ekiGFTCrUAX9JKLwb&_nc_ht=video.fsin8-2.fna&hnt1=frc&hnt2=cln&oh=61239bff71f34eb526b8a204d4863da1&oe=6048C25C',\r\n            'https://video.fsin8-1.fna.fbcdn.net/v/t42.1790-2/153443730_178310650492323_1681995540137190115_n.mp4?_nc_cat=105&ccb=1-3&_nc_sid=5aebc0&efg=eyJ2ZW5jb2RlX3RhZyI6ImRhc2hfYXVkaW9fYWFjcF82NF9mcmFnXzJfYXVkaW8ifQ%3D%3D&_nc_ohc=QVeE_ihJdbsAX9ZWV-w&_nc_ht=video.fsin8-1.fna&oh=203c46220572a584c152e88c85ef548a&oe=604701B2'\r\n        ).catch((err) => {\r\n            return null;\r\n        });\r\n        if (videoData === null) {\r\n            writeLogFn({\r\n                type: 'ERROR',\r\n                message: 'Cannot convert video!!!',\r\n            });\r\n            return;\r\n        }\r\n        writeLogFn({\r\n            type: 'Result',\r\n            message: 'Convert video success!',\r\n        });\r\n\r\n        triggerChangeVideo(videoData);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Box m={3} display='flex' justifyContent='center'>\r\n                <Box className={classes.renderBox} display='div'>\r\n                    <ul>\r\n                        {trueLog.map((log, i) => (\r\n                            <li key={i}>{log}</li>\r\n                        ))}\r\n                    </ul>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box m={3} display='flex' justifyContent='center'>\r\n                <Button onClick={handleRenderBtn}>Render</Button>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n","import React from 'react';\n\nimport { Container, Grid, Typography, Button, Box } from '@material-ui/core';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nimport Video from './Video';\nimport Render from './Render';\n\ninterface IState {\n    srcVideo?: string;\n    srcAudio?: string;\n    args: Array<string> | null;\n    videoOutput: Uint8Array | null;\n}\n\nexport default class App extends React.Component<{}, IState> {\n    state: Readonly<IState> = {\n        args: null,\n        videoOutput: null,\n    };\n\n    triggerChangeVideo = (videoData: Uint8Array) => {\n        var srcBlob = URL.createObjectURL(new Blob([videoData.buffer]));\n        this.setState({ srcVideo: srcBlob, videoOutput: videoData });\n    };\n\n    componentDidMount() {}\n\n    render() {\n        return (\n            <Container>\n                <Grid container justify='center'>\n                    <Grid item>\n                        <Typography align='center' variant='h3'>\n                            Download\n                        </Typography>\n                    </Grid>\n                    <Video\n                        src={this.state.srcVideo ? this.state.srcVideo : ''}\n                    />\n                    <Render\n                        srcVideo={this.state.srcVideo}\n                        srcAudio={this.state.srcAudio}\n                        triggerChangeVideo={this.triggerChangeVideo}\n                    />\n                </Grid>\n\n                {this.state.videoOutput !== null && (\n                    <Grid item>\n                        <Box display=\"flex\" justifyContent='center'>\n                            <Button startIcon={<CloudDownloadIcon />} variant=\"contained\" color=\"secondary\">Download</Button>\n                        </Box>\n                    </Grid>\n                )}\n            </Container>\n        );\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}